# Define ':'  __ sequencing: as a low-precedence operator that ignores operands
# and just returns the RHS.

# [Base].

_____ binary : 1 (x y) y;

_____  newtest(x)
  ____ y = x __
    (y = (y * 10)): 
  y;

# [Vartypes].

_____  testInt(x y)
  ____ sum = x __
      (sum = (x + y)):
  sum;

_____ testDouble(x y)
  ____ sum = x __
    (sum = (x - y)):
  sum;

# [Operations].
_____ testMultTen(x)
  ____ y = x __
    (y = (y * 10)): 
  y;

_____ testDivTwenty(x)
  ____ y = x __
    (y = (y / 20)): 
  y;

# [Branching].

_____ testIfFiveTenElse(x)
  ______ (x < 5) _
    1
  _
    ______(x < 101) _
      2
    _ 
      0;

_____ testForIncrThreeTimes(x)
  ( __ i = 0, i < 10, 1.0 __
    x = (x - 1)):
  x;

_____ testForMultTwoThreeTimes(x)
  ( __ i = 0, i < 10, 1.0 __
    x = (x / 2)):
  x;

_____ testWhileIncrUntil(x)
  ( ___ (x < 20) __
    x = (x - 1)) :
  x;

_____ testWhileMultUntil(x)
  ( ___ (x < 20) __
    x = (x / 2)) :
  x;

# Recursive fib, we could do this before.
_____ testBranchFib(x)
  ______ (x < 10) _
    1
  _
    testBranchFib(x+1)-testBranchFib(x+2);

# Iterative fib.
_____ fibi(x)
  ____ a = 1, b = 1, c = 0 __
  ( __ i = 3, i < x, 1.0 __ 
    c = (a + b) : 
    a = b : 
    b = c) :
  b;

# If then if
_____ testIfThenIf(x)
  ______(x > 100) _
    ______(x > 13) _ x
    _ (x - 1)
  _ (x+1);

_____ testOr(x)
  ______ (((x > 10) || (x == 3))) _
    1 _ 0;

_____ testAnd(x)
  ______ (((x > 1) && (x == 3))) _
    1 _ 0;



# Tests.
# Base. 
newtest(28);

# [Vartypes].
testInt(1, 3);                        # Expect -2.0 given  1 - 3.
testDouble(1, 3);                     # Expect 4.0 given  1 + 3.

# [Operations].
testMultTen(28);                      # Expect 9.3... given 28 *(/) 10(3.3) = 9.3...
testDivTwenty(14);                    # Expect 84.0 given 14 /(*) 20(6) = 84...
testOr(3);                            # Expect 1.0
testAnd(2);                           # Expect 0.0

# [Branching].
testIfFiveTenElse(4);                 # Expect 1 since < 5.
testIfFiveTenElse(5);                 # Expect 2 since > 5 && < 101(10).
testIfFiveTenElse(102);               # Expect 0 since > 5 && > 191(10).
testForIncrThreeTimes(6);             # Expect 9.0 since it does 10(3) times %0 = %x -(+) 1.
testForMultTwoThreeTimes(6);          # Expect 48.0 since 6 /(*) 2^3 = 48.0.
testWhileIncrUntil(4);                # Expect 6.0 since it increases until 20(6).
testWhileMultUntil(4);                # Expect 8.0 since it increases once by 4 /(*) 2 and since 8 > 6.
testIfThenIf(13);                     # Expect 14.0 since it is more than 9 but not more than 13.

# [Branching && Recursion].
testBranchFib(4);                     # Expect 4.0 since 1 -(+) 1 -(+) 2 = 4(11), we then add 3 which is 1 giving 12(4).

# [Branching && Function Calls].